// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/headingy/trireme/enforcer/utils/rpcwrapper (interfaces: RPCClient,RPCServer)

package mockrpcwrapper

import (
	gomock "github.com/golang/mock/gomock"
	rpcwrapper "github.com/headingy/trireme/enforcer/utils/rpcwrapper"
)

// MockRPCClient is a mock of RPCClient interface
type MockRPCClient struct {
	ctrl     *gomock.Controller
	recorder *MockRPCClientMockRecorder
}

// MockRPCClientMockRecorder is the mock recorder for MockRPCClient
type MockRPCClientMockRecorder struct {
	mock *MockRPCClient
}

// NewMockRPCClient creates a new mock instance
func NewMockRPCClient(ctrl *gomock.Controller) *MockRPCClient {
	mock := &MockRPCClient{ctrl: ctrl}
	mock.recorder = &MockRPCClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockRPCClient) EXPECT() *MockRPCClientMockRecorder {
	return _m.recorder
}

// CheckValidity mocks base method
func (_m *MockRPCClient) CheckValidity(_param0 *rpcwrapper.Request, _param1 string) bool {
	ret := _m.ctrl.Call(_m, "CheckValidity", _param0, _param1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckValidity indicates an expected call of CheckValidity
func (_mr *MockRPCClientMockRecorder) CheckValidity(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckValidity", arg0, arg1)
}

// ContextList mocks base method
func (_m *MockRPCClient) ContextList() []string {
	ret := _m.ctrl.Call(_m, "ContextList")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ContextList indicates an expected call of ContextList
func (_mr *MockRPCClientMockRecorder) ContextList() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ContextList")
}

// DestroyRPCClient mocks base method
func (_m *MockRPCClient) DestroyRPCClient(_param0 string) {
	_m.ctrl.Call(_m, "DestroyRPCClient", _param0)
}

// DestroyRPCClient indicates an expected call of DestroyRPCClient
func (_mr *MockRPCClientMockRecorder) DestroyRPCClient(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DestroyRPCClient", arg0)
}

// GetRPCClient mocks base method
func (_m *MockRPCClient) GetRPCClient(_param0 string) (*rpcwrapper.RPCHdl, error) {
	ret := _m.ctrl.Call(_m, "GetRPCClient", _param0)
	ret0, _ := ret[0].(*rpcwrapper.RPCHdl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRPCClient indicates an expected call of GetRPCClient
func (_mr *MockRPCClientMockRecorder) GetRPCClient(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRPCClient", arg0)
}

// NewRPCClient mocks base method
func (_m *MockRPCClient) NewRPCClient(_param0 string, _param1 string, _param2 string) error {
	ret := _m.ctrl.Call(_m, "NewRPCClient", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewRPCClient indicates an expected call of NewRPCClient
func (_mr *MockRPCClientMockRecorder) NewRPCClient(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewRPCClient", arg0, arg1, arg2)
}

// RemoteCall mocks base method
func (_m *MockRPCClient) RemoteCall(_param0 string, _param1 string, _param2 *rpcwrapper.Request, _param3 *rpcwrapper.Response) error {
	ret := _m.ctrl.Call(_m, "RemoteCall", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoteCall indicates an expected call of RemoteCall
func (_mr *MockRPCClientMockRecorder) RemoteCall(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoteCall", arg0, arg1, arg2, arg3)
}

// MockRPCServer is a mock of RPCServer interface
type MockRPCServer struct {
	ctrl     *gomock.Controller
	recorder *MockRPCServerMockRecorder
}

// MockRPCServerMockRecorder is the mock recorder for MockRPCServer
type MockRPCServerMockRecorder struct {
	mock *MockRPCServer
}

// NewMockRPCServer creates a new mock instance
func NewMockRPCServer(ctrl *gomock.Controller) *MockRPCServer {
	mock := &MockRPCServer{ctrl: ctrl}
	mock.recorder = &MockRPCServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockRPCServer) EXPECT() *MockRPCServerMockRecorder {
	return _m.recorder
}

// CheckValidity mocks base method
func (_m *MockRPCServer) CheckValidity(_param0 *rpcwrapper.Request, _param1 string) bool {
	ret := _m.ctrl.Call(_m, "CheckValidity", _param0, _param1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckValidity indicates an expected call of CheckValidity
func (_mr *MockRPCServerMockRecorder) CheckValidity(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckValidity", arg0, arg1)
}

// ProcessMessage mocks base method
func (_m *MockRPCServer) ProcessMessage(_param0 *rpcwrapper.Request, _param1 string) bool {
	ret := _m.ctrl.Call(_m, "ProcessMessage", _param0, _param1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ProcessMessage indicates an expected call of ProcessMessage
func (_mr *MockRPCServerMockRecorder) ProcessMessage(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ProcessMessage", arg0, arg1)
}

// StartServer mocks base method
func (_m *MockRPCServer) StartServer(_param0 string, _param1 string, _param2 interface{}) error {
	ret := _m.ctrl.Call(_m, "StartServer", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartServer indicates an expected call of StartServer
func (_mr *MockRPCServerMockRecorder) StartServer(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StartServer", arg0, arg1, arg2)
}

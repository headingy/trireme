// Automatically generated by MockGen. DO NOT EDIT!
// Source: supervisor/provider/iptablesprovider.go

// nolint
package mockprovider

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of IptablesProvider interface
type MockIptablesProvider struct {
	ctrl     *gomock.Controller
	recorder *_MockIptablesProviderRecorder
}

// Recorder for MockIptablesProvider (not exported)
type _MockIptablesProviderRecorder struct {
	mock *MockIptablesProvider
}

func NewMockIptablesProvider(ctrl *gomock.Controller) *MockIptablesProvider {
	mock := &MockIptablesProvider{ctrl: ctrl}
	mock.recorder = &_MockIptablesProviderRecorder{mock}
	return mock
}

func (_m *MockIptablesProvider) EXPECT() *_MockIptablesProviderRecorder {
	return _m.recorder
}

func (_m *MockIptablesProvider) Append(table string, chain string, rulespec ...string) error {
	_s := []interface{}{table, chain}
	for _, _x := range rulespec {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Append", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIptablesProviderRecorder) Append(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Append", _s...)
}

func (_m *MockIptablesProvider) Insert(table string, chain string, pos int, rulespec ...string) error {
	_s := []interface{}{table, chain, pos}
	for _, _x := range rulespec {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Insert", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIptablesProviderRecorder) Insert(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Insert", _s...)
}

func (_m *MockIptablesProvider) Delete(table string, chain string, rulespec ...string) error {
	_s := []interface{}{table, chain}
	for _, _x := range rulespec {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Delete", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIptablesProviderRecorder) Delete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", _s...)
}

func (_m *MockIptablesProvider) ListChains(table string) ([]string, error) {
	ret := _m.ctrl.Call(_m, "ListChains", table)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockIptablesProviderRecorder) ListChains(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListChains", arg0)
}

func (_m *MockIptablesProvider) ClearChain(table string, chain string) error {
	ret := _m.ctrl.Call(_m, "ClearChain", table, chain)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIptablesProviderRecorder) ClearChain(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ClearChain", arg0, arg1)
}

func (_m *MockIptablesProvider) DeleteChain(table string, chain string) error {
	ret := _m.ctrl.Call(_m, "DeleteChain", table, chain)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIptablesProviderRecorder) DeleteChain(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteChain", arg0, arg1)
}

func (_m *MockIptablesProvider) NewChain(table string, chain string) error {
	ret := _m.ctrl.Call(_m, "NewChain", table, chain)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockIptablesProviderRecorder) NewChain(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NewChain", arg0, arg1)
}
